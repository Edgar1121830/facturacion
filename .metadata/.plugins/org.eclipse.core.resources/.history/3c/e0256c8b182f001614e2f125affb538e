package co.com.ges.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.primefaces.component.datatable.DataTable;

import co.com.ges.dto.OpcionesMenuUsuario;
import co.com.ges.enums.AsignacionEnum;
import co.com.ges.enums.EstadosEnum;
import co.com.ges.modelo.Ciudad;
import co.com.ges.modelo.Estado;
import co.com.ges.modelo.Estadocaso;
import co.com.ges.modelo.Funcionario;
import co.com.ges.servicio.GesServicio;

@ManagedBean(name="estc")
@SessionScoped
public class AdminEstaControl implements Serializable{

	private static final long serialVersionUID = 1L;

	private Properties prop = new Properties();
	private String user;
	private Funcionario f = new Funcionario();
	private DataTable dtActu;
	private DataTable dtActuE;
	private DataTable dtActuZ;
	private List<EstadosEnum> lienu =new ArrayList<EstadosEnum>();
	private Estadocaso esc = new Estadocaso(); 
	private List<AsignacionEnum> as = new ArrayList<AsignacionEnum>(); 
	
	@EJB
	GesServicio servicio;
	
	public AdminEstaControl() {
		super();
		this.cargarPropiedades();
	}
	
	public void cargarPropiedades(){
		prop = new Properties();
		try{
			prop.load(AdministracionControl.class.getResourceAsStream("mensajes.properties"));
			user=(String)FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(LoginControl.AUTH_KEY);
			f =(Funcionario) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(LoginControl.USERS);
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@PostConstruct
	public void cargarPermisos(){
		@SuppressWarnings("unchecked")
		List<OpcionesMenuUsuario> opc = (List<OpcionesMenuUsuario>) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("menu");
		try{
			dtActu = new DataTable();
			dtActuE = new DataTable();
			dtActuZ = new DataTable();
			lienu.add(EstadosEnum.ACTIVO);
			lienu.add(EstadosEnum.INACTIVO);
			as.add(AsignacionEnum.SI);
			as.add(AsignacionEnum.NO);
			cargarDatos();
//			for(OpcionesMenuUsuario o: opc){
//				if((o.getIdMenu().compareTo(ComponentesMenu.CONTRATO.getIdComponente())==0) 
//						&& (o.getPermisoCodigo().compareTo(PermisosMenu.ADMCONTRATRO.getIdPermiso().intValue())==0)){
//					if((o.getIdMenu().compareTo(ComponentesMenu.CONTRATO.getIdComponente())==0) 
//						&& (o.getPermisoCodigo().compareTo(PermisosMenu.SUMINISTROS.getIdPermiso().intValue())==0)){
//						
//					}
//				}
//			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void cargarDatos(){
		try{
			dtActu = new DataTable();
			dtActuE = new DataTable();
			dtActuZ = new DataTable();
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public List<EstadosEnum> getLienu() {
		return lienu;
	}

	public void setLienu(List<EstadosEnum> lienu) {
		this.lienu = lienu;
	}

	public Estadocaso getEsc() {
		return esc;
	}

	public void setEsc(Estadocaso esc) {
		this.esc = esc;
	}

	public List<AsignacionEnum> getAs() {
		return as;
	}

	public void setAs(List<AsignacionEnum> as) {
		this.as = as;
	}
	
	

}
